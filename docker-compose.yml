services:
  server:
    container_name: ${SERVER_HOST}
    build:
      context: ./server
      dockerfile: Dockerfile
    env_file: .env
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
    expose:
      - ${SERVER_PORT}
    depends_on:
      - postgres
        # condition: service_healthy    
    volumes:
      - type: bind
        source: ./server/src
        target: /app/src
    command: npm run dev
    restart: always

  client:
    container_name: ${CLIENT_HOST}
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - ${CLIENT_PORT}:${CLIENT_PORT}
    volumes:
      - type: bind
        source: ./client/src
        target: /app/src
      - type: bind
        source: ./client/public
        target: /app/public
    env_file: .env
    depends_on:
      - server
    # networks:
    #   - app-network
    command: npm run dev
    restart: always

  postgres:
    container_name: ${POSTGRES_HOST}
    image: postgres:latest
    env_file: .env
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      - ride_share:/var/lib/postgresql/data
      - ./server/src/config/init_data:/docker-entrypoint-initdb.d
    # healthcheck:
    #   test: [ "CMD-SHELL", "pg_isready" ]
    #   interval: 5s
    #   timeout: 5s
    #   retries: 5
    # environment:
    #   - PGPASSWORD=${POSTGRES_PASSWORD}
    #   - PGPORT=${POSTGRES_PORT}
    #   - PGHOST=${POSTGRES_HOST}
    #   - PGUSER=${POSTGRES_USER}
    #   - PGDATABASE=${POSTGRES_DATABASE}
  mongo:
    container_name: ${MONGO_HOST}
    env_file: .env
    image: mongo:latest
    ports:
      - ${MONGO_PORT}:${MONGO_PORT}
    volumes:
      - mongodata:/data/db
volumes:
  ride_share:
  mongodata:
    name: "mongodata"

# ngrok:
#   container_name: ${NGROK_HOST}
#   image: ngrok/ngrok:latest
#   command: ngrok http client:${CLIENT_PORT}
#   env_file: .env
#   ports:
#     - "4040:4040"
#   networks:
#     - app-network
#   depends_on:
#     - client
# networks:
#   app-network:
#     driver: bridge